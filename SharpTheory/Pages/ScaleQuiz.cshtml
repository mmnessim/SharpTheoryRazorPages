@page "/scalequiz"
@model SharpTheory.Pages.ScaleQuizModel
<h1>
    UNDER CONSTRUCTION
</h1>
@{
    var whiteKeyNotes = new[] { 0, 2, 4, 5, 7, 9, 11 };
    var blackKeyOffsets = new Dictionary<int, int>
    {
        { 1, 35 },
        { 3, 85 },
        { 6, 185 },
        { 8, 235 },
        { 10, 285 }
    };
}

@if (Model.Integers != null && Model.Scale != null)
{
    <div class="piano">
        @foreach (var note in whiteKeyNotes)
        {
            <div class="white-key 
                @(Model.RawInts.Contains(note) ? "included-in-key" : "")
                @(Model.RawInts[0] == note ? "tonic-key" : "")"
                data-note="@note"></div>
        }
        <div class="black-keys">
            @foreach (var kvp in blackKeyOffsets)
            {
                <div class="black-key 
                     @(Model.RawInts.Contains(kvp.Key) ? "included-in-key" : "")
                     @(Model.RawInts[0] == kvp.Key ? "tonic-key" : "")"
                     style="left: @($"{kvp.Value}px");"
                     data-note="@kvp.Key"></div>
            }
        </div>
    </div>

    <div class="scale-container">
        @foreach (var I in Model.Integers)
        {
            <button class="btn btn-secondary m-1
                    @(I.Integer == Model.Scale.Integer ? "included" : "")
                    @(Model.Scale.Major != null &&
                        (
                            Model.Scale.Major.Notes.Contains(I.Names[0]) ||
                            (I.Names.Count > 1 && Model.Scale.Major.Notes.Contains(I.Names[1]))
                            )
                            ? "selected" : "")">
                @I.Names[0]@(I.Names.Count > 1 ? " / " + I.Names[1] : "")
            </button>
        }
    </div>
}

@if (Model.Scale != null)
{
    <p>
        @Model.Scale.Tonic
    </p>
    @if (Model.Scale.Major != null)
    {
        @foreach (var note in Model.Scale.Major.Notes)
        {
            <span>@note</span>
        }
    }
}
