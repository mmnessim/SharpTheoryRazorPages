@page "/scalevisualizer"
@model SharpTheory.Pages.ScaleQuizModel
<h1>
    Major Scale Visualizer
</h1>
@if (Model.Scale != null)
{
    <h2>@Model.Scale.Tonic Major </h2>
}
@{
    var whiteKeyNotes = new[] { 0, 2, 4, 5, 7, 9, 11 };
    var blackKeyOffsets = new Dictionary<int, int>
{
{ 1, 35 },
{ 3, 85 },
{ 6, 185 },
{ 8, 235 },
{ 10, 285 }
};
}

@if (Model.Integers != null && Model.Scale != null)
{
    <div class="d-flex">
        <div class="piano">
            @foreach (var note in whiteKeyNotes)
            {
                <div class="white-key 
                            @(Model.RawInts.Contains(note) ? "included-in-key" : "")
                            @(Model.RawInts[0] == note ? "tonic-key" : "")
                            @* @(Model.RawInts[4] == note ? "dominant-key" : "")      *@
                                " data-note="@note">
                    @Model.Integers?.FirstOrDefault(i => i.Integer == note)?.Names[0]
                </div>
            }
            @foreach (var note in whiteKeyNotes)
            {
                <div class="white-key
                            @(Model.RawInts.Contains(note) ? "included-in-key" : "")
                            @(Model.RawInts[0] == note ? "tonic-key" : "")
                            @* @(Model.RawInts[4] == note ? "dominant-key" : "") *@
                                " data-note="@note">
                    @Model.Integers?.FirstOrDefault(i => i.Integer == note)?.Names[0]
                </div>
            }
            <div class="black-keys">
                @foreach (var kvp in blackKeyOffsets)
                {
                    <div class="black-key 
                                @(Model.RawInts.Contains(kvp.Key) ? "included-in-key" : "")
                                @(Model.RawInts[0] == kvp.Key ? "tonic-key" : "")
                                @* @(Model.RawInts[4] == kvp.Key ? "dominant-key" : "") *@
                                " style="left: @($"{kvp.Value}px");" data-note="@kvp.Key">
                        @Model.Integers?.FirstOrDefault(i => i.Integer == kvp.Key)?.Names[0] /
                        @Model.Integers?.FirstOrDefault(i => i.Integer == kvp.Key)?.Names[1]
                    </div>
                }
                @foreach (var kvp in blackKeyOffsets)
                {
                    <div class="black-key
                                @(Model.RawInts.Contains(kvp.Key) ? "included-in-key" : "")
                                @(Model.RawInts[0] == kvp.Key ? "tonic-key" : "")
                                @* @(Model.RawInts[4] == kvp.Key ? "dominant-key" : "") *@
                                " style="left: @($"{kvp.Value + 335}px");" data-note="@kvp.Key">
                        @Model.Integers?.FirstOrDefault(i => i.Integer == kvp.Key)?.Names[0] /
                        @Model.Integers?.FirstOrDefault(i => i.Integer == kvp.Key)?.Names[1]
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="scale-container d-flex">
        @foreach (var I in Model.Integers)
        {
            <form method="post">
                <input type="hidden" asp-for="ScaleInt" value="@I.Integer" />
                <button class="btn btn-secondary m-1
                    @(I.Integer == Model.Scale.Integer ? "included" : "")
                    ">
                        @I.Names[0]@(I.Names.Count > 1 ? " / " + I.Names[1] : "")
                 </button>
            </form>
        }
    </div>
}
